# Principles of MLOps
Transition friction, Version Control, Performance, Automation, Monitoring, Continuous training 
# MLflow
Open Source platform to mainatain end to end machine learning life cycle. 
# MLFlow components
## Tracking - Track expreriments to record and compare parameters and results
## Projects - Packaage code to ensure reusability and reproducibility
## Model - Provides standard unit for packaging models
## Registry - Central model store for model versioning stage tarnsitions, annotations

# set_tracking uri() 
## set the default tracking uri for current run
## we can be empty string, will create then "mlruns" folder
## we can provide name folder 
## we can provide file path -> but only works for C drive 
## we can provide remote path
## we can provide databricks workspace

# get_tracking uri()
## gives only output 

# create_experiment()
## to create new experiment
## can provide name of the experiment
## can provide artifact_location paramater -> 
## can provide tags as dictionary of key value pairs for future usage
## return the string id 

# set_experiment()
## set already created experiment
## we can pass experiment name, experiment id
## return mlflow.entities.Experiment 

# start_run()
## starts new MLflow under in an experiment 
## we can provide run_id -> if need to utilize existing run
## we can provide experiment_id -> if we don't provide run_id
## we can provide run_name -> if we don't provide run_id
## we can provide nested run
## we can provide tags also
## we can provide description of any run
## it returns mlflow.ActiveRun object as a context manager
## if we use "with", don't need to end manually -> otherwise, we need to end it with end_run

# end_run()
## to end the start run function 

# active_run()
## returns which is active now
## takes no paramter but returns run object 

# last_active_run()
## recently active run, that ended
## takes no paramter but returns run object

# mlflow.log_param() # mlflow.log_params()

## to log hyperparamters as key value pair
## we can provide name and value of the parameter as key value pair / dictionary of key value pairs 

# mlflow.log_metric() # mlflow.log_metrics()

## we can provide name and value of the metric as key, value pair/ dictionary of key value pairs 
## we can also add step like epoch

# mlflow.log_artifact() # mlflow.log_artifacts()
## artifact can be anything -> it can be output model, training dataset
## we need to proivide local path -> path of the file we need to store
## artifact_path -> where we need to store the dataset

# mlflow.get_artifact_uri()
## returns absolute URI referring to the specified artifact or the currently active run's artifact root





